
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ---------- ENUMS ----------
enum UserRole {
  creator
  approver
  admin
}

enum UserStatus {
  pending
  active
  suspended
}

enum PoStatus {
  draft
  submitted
  approved
  rejected
}

enum PoAction {
  created
  updated
  submitted
  approved
  rejected
  comment_added
}

// ---------- MODELS ----------
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique @db.VarChar(255)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  fullName     String    @map("full_name") @db.VarChar(100)
  role         UserRole
  status       UserStatus @default(pending)
  createdAt    DateTime  @map("created_at") @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @map("updated_at") @updatedAt @db.Timestamptz(6)

  // relations
  createdPurchaseOrders  PurchaseOrder[] @relation("createdBy")
  reviewedPurchaseOrders PurchaseOrder[] @relation("reviewedBy")
  poHistoryEntries       PoHistory[]

  @@map("users")
  @@index([email], name: "idx_users_email")
}

model PurchaseOrder {
  id          Int       @id @default(autoincrement())
  poNumber    String    @map("po_number") @unique @db.VarChar(50)
  title       String    @db.VarChar(255)
  description String?   @db.Text
  totalAmount Decimal   @map("total_amount") @db.Decimal(15, 2)
  status      PoStatus  @default(draft)
  version     Int       @default(1)

  // relations: created_by & reviewed_by
  createdById Int       @map("created_by")
  createdBy   User      @relation("createdBy", fields: [createdById], references: [id])

  reviewedById Int?     @map("reviewed_by")
  reviewedBy   User?    @relation("reviewedBy", fields: [reviewedById], references: [id])

  submittedAt DateTime? @map("submitted_at")  @db.Timestamptz(6)
  reviewedAt  DateTime? @map("reviewed_at")   @db.Timestamptz(6)

  createdAt   DateTime  @map("created_at")   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @map("updated_at")   @updatedAt @db.Timestamptz(6)

  poHistory    PoHistory[]

  @@map("purchase_orders")
  @@index([status], name: "idx_po_status")
  @@index([createdById], name: "idx_po_created_by")
  @@index([createdAt], name: "idx_po_created_at")
  @@index([submittedAt], name: "idx_po_submitted_at")
  @@index([reviewedById], name: "idx_po_reviewed_by")
}

model PoHistory {
  id         Int       @id @default(autoincrement())
  poId       Int       @map("po_id")
  po         PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  userId     Int?      @map("user_id")
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     PoAction
  description String?  @db.Text
  comment     String?  @db.Text
  createdAt  DateTime  @map("created_at") @default(now()) @db.Timestamptz(6)

  @@map("po_history")
  @@index([poId], name: "idx_po_history_po_id")
  @@index([poId, createdAt, id], name: "idx_po_history_po_created")
}